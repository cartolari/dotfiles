" vim: set foldlevel=0 foldmethod=marker:

set nocompatible
let mapleader = ","

" Vimscripts {{{
source ~/.vim/bundles.vim
source ~/.vim/keymaps.vim
runtime macros/matchit.vim " match the opening/closign html tag when pressing '%'
" }}}

" Vim options {{{
filetype plugin indent on
syntax on
set encoding=utf-8
set number
set relativenumber
set ignorecase
set smartcase
set infercase
set hlsearch
set incsearch
set smartindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set wildmenu
set wildmode=full
set mouse=a
set nowrap
set shiftround
set laststatus=2
set nobackup
set noswapfile
set undodir=~/.vim/tmp/undo//
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload
set dictionary=/usr/share/dict/words
set foldmethod=syntax
set nofoldenable
set history=1000
set scrolloff=3 " Leave some ground while scrolling
set bg=dark
set shortmess+=c " Quiet completions
set splitright
colorscheme badwolf
" }}}

" Highlight {{{
highlight OverLength ctermbg=red ctermfg=white guibg=#592929

" Marks the 81st column of lines wider than 80 characters
function! ShowOverLength()
  if !exists('b:over_length_match')
    let b:over_length_match = matchadd('OverLength', '\v%81v\ze(.+)', 100)
  endif
endfunction

function! HideOverLength()
  if exists('b:over_length_match')
    call matchdelete(b:over_length_match)
    unlet b:over_length_match
  endif
endfunction

augroup Highlight
  autocmd!
  autocmd BufEnter * call ShowOverLength()
augroup END

command HideOverLength call HideOverLength()
command ShowOverLength call ShowOverLength()
" }}}

" CSApprox, for emulating gvim colors on the terminal {{{
if !has('gui_running') && exists(':CSApprox')
  CSApprox
endif

if &term =~ '^\(xterm\|screen\)$' && $COLORTERM == 'gnome-terminal'
  " Number of terminal colors
  set t_Co=256
endif
" }}}

augroup markdown " {{{
  autocmd!

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell
  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
augroup END " }}}

augroup git " {{{
  autocmd!

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell
  " Automatically closes Fugitive.vim buffers when leaving them
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END
" }}}

" General auto commands {{{
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \ exe "normal g`\"" |
        \ endif
  " Allow stylesheets and html to autocomplete hyphenated words
  autocmd FileType html,css,scss,sass setlocal iskeyword+=-
  " Remove any trailing whitespace before saving
  autocmd BufWrite * :FixWhitespace
  " Resize splits when the window is resized
  autocmd VimResized * :wincmd =
  " Treat ? as part of names in Ruby
  autocmd FileType ruby setlocal iskeyword+=?
augroup END
" }}}

" Ag as grep {{{
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --smart-case
end
" }}}

" Syntastic {{{
let g:syntastic_aggregate_errors = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
      \ "mode": "passive",
      \ "active_filetypes": [],
      \ "passive_filetypes": [] }

let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_warning_symbol='⚠'

" Ruby
let g:syntastic_ruby_rubocop_exec = '~/rubocop.sh'
let g:syntastic_ruby_checkers = ['rubocop', 'mri', 'reek']

" Haml
let g:syntastic_haml_checkers = ['haml-lint']
" }}}

" Netrw {{{
let g:netrw_localrmdir='rm -r'
" }}}

" Vim instant markdown {{{
let g:instant_markdown_autostart = 0
" }}}

" Lightline {{{
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component': {
  \   'readonly': '%{&readonly?"":""}',
  \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
  \ },
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }
let g:buftabline_numbers = 1
let g:buftabline_indicators = 1
let g:buftabline_separators = 1
let g:lightline.colorscheme = 'Tomorrow_Night'
" }}}

" Switch {{{
autocmd FileType ruby let b:switch_custom_definitions =
  \ [
  \   {
  \     'validates_\(\w\+\)_of\s\+\(:\w\+\)': 'validates \2, \1: true',
  \     'validates\s\+:\(\w\+\),\s\+\(\w\+\):\s\+true':     'validates_\2_of :\1',
  \   },
  \ ]
" }}}

" Vim test {{{
let g:test#strategy = 'vtr'
" }}}

" Localvimrc  {{{
let g:localvimrc_persistent = 1
let g:localvimrc_sandbox = 0
" }}}

" FZF {{{
" Return a list with all open buffers
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

" Handles a MRU search in FZF
function! s:bufopen(e)
  " Exit if no file was picked
  if len(a:e) < 2 | return | endif

  " Fzf sends two lines the first with the key combination used to pick
  " a file and the second with the matched line
  let [key, buffer_line] = a:e[0:1]
  " Extract the buffer number from the matched line
  let buffer_number = matchstr(buffer_line, '^[ 0-9]*')
  " Pick the appropriate command based on the key combination used
  let cmd = get({
        \ 'ctrl-x': 'sbuffer',
        \ 'ctrl-v': 'vertical sbuffer',
        \ 'ctrl-t': 'tabnew | buffer '
        \ }, key, 'buffer')
  " Run the picked command with the matched buffer
  execute cmd . buffer_number
endfunction

" Command to list MRU files
command! FZFMru call fzf#run({
      \ 'source': reverse(<sid>buflist()),
      \ 'sink*': function('<sid>bufopen'),
      \ 'options': '--expect=ctrl-t,ctrl-v,ctrl-x',
      \ 'down': len(<sid>buflist()) + 2
      \ })
" }}}

" CtrlSF {{{
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_leading_space = 2
let g:ctrlsf_regex_pattern = 1
" }}}

" Disable standard tComment mappings {{{
let g:tcommentMapLeader1 = ''
let g:tcommentMapLeader2 = ''
" }}}

" Yank Ring {{{
let g:yankring_dot_repeat_yank = 1
let g:yankring_clipboard_monitor = 0
" }}}

" Ultisnips {{{
let g:UltiSnipsUsePythonVersion = 3
" }}}

" Tab Completion {{{

execute 'py3file ' . expand('<sfile>:p:h') . '/python/completion.py'

let g:aggregate_completions = {
      \  'buffers': {
      \    'mark': '[B]',
      \    'function': 'BufferComplete'
      \  },
      \  'tmux': {
      \    'mark': '[TMUX]',
      \    'function': 'tmuxcomplete#complete'
      \  },
      \  'UltiSnips': {
      \    'mark': '[US]',
      \    'function': 'UltiSnipsComplete'
      \  },
      \  'Tags': {
      \    'mark': '[T]',
      \    'function': 'TagComplete'
      \  },
      \  'Syntax': {
      \    'mark': '[S]',
      \    'function': 'syntaxcomplete#Complete'
      \  }
      \}

function! BufferComplete(start, base)
  return py3eval('unique_words()')
endfunction

function! UltiSnipsComplete(start, base)
  return map(items(UltiSnips#SnippetsInCurrentScope()),
        \ "{ 'word': v:val[0], 'menu': '[US] ' . v:val[1] }")
endfunction

function TagComplete(start, base)
  return map(taglist('.*'),
        \ "{'word': v:val.name, 'kind': v:val.kind, 'menu': '[T]'}")
endfunction

function! CompletionStart()
  " locate the start of the word
  let line = getline('.')
  let start = col('.') - 1
  while start > 0 && line[start - 1] =~ '\w'
    let start -= 1
  endwhile
  return start
endfunction

augroup CompleteFuncs
  autocmd Filetype *
        \	if &omnifunc == '' | setlocal omnifunc=syntaxcomplete#Complete | endif
  autocmd BufEnter * setlocal completefunc=AggregateComplete
augroup end

" Joins a lot of completions source in one, and displays them altogether
function! AggregateComplete(start, base)
  if a:start | return CompletionStart() | endif

  let all_completions = []
  for [completion, params] in items(g:aggregate_completions)
    let CompleteFunction = function(params.function)

    let completions = map(CompleteFunction(a:start, ''),
          \ 'MakeCompletionItem(v:val, params)')

    call extend(all_completions, completions)
  endfor

  return py3eval(printf('complete_local("%s", vim.eval("l:all_completions"))', a:base))
endfunction

function MakeCompletionItem(word, options)
  if (type(a:word) == type({})) | return a:word | endif
  return {
        \  'word': a:word,
        \  'menu': a:options.mark
        \ }
endfunction

let g:tmuxcomplete#trigger = ''

let g:ycm_collect_identifiers_from_tags_files = 1

" }}}

" Gundo {{{
let g:gundo_prefer_python3 = 1
" }}}

let g:airline_powerline_fonts = 1

set guifont=Sauce\ Code\ Pro\ For\ Powerline:12
