set nocompatible
filetype off
let mapleader = ","

if has('vim_starting')
  call plug#begin('~/.vim/bundle')
endif

"Commands and mappings
Plug 'andrewradev/splitjoin.vim', {'for': [
      \ 'ruby', 'eruby', 'coffee', 'python',
      \ 'javascript', 'html', 'xml', 'css',
      \ 'scss', 'less', 'yaml', 'vim' ]}
Plug 'henrik/vim-indexed-search'
Plug 'kana/vim-textobj-user'
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/syntastic'
Plug 'thoughtbot/vim-rspec', {'for': 'ruby'}
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/starrange'
Plug 'wolfy87/vim-enmasse'

"Completions and snippets
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'marijnh/tern_for_vim', {'for': ['html', 'javascript'], 'do': 'npm install'}
Plug 'rstacruz/sparkup', {'for': 'html'}
Plug 'shougo/neocomplete.vim'
Plug 'sirver/ultisnips'
Plug 'tpope/vim-endwise', {'for': ['ruby', 'sh', 'zsh', 'vim', 'c', 'cpp']}
Plug 'wellle/tmux-complete.vim'

"Colorschemes
Plug 'csapprox'
Plug 'trapd00r/neverland-vim-theme'

"File finders and browsers
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'rking/ag.vim', {'on': ['Ag']}

"Integrations
Plug 'epeli/slimux'
Plug 'tpope/vim-fugitive'

"Interface
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'

"Language specific
Plug 'ingydotnet/yaml-vim', {'for': 'yaml'}
Plug 'isnowfy/python-vim-instant-markdown', {'on': 'Instantmd'}
Plug 'keithbsmiley/tmux.vim', {'for': 'tmux'}
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby', {'for': ['ruby', 'eruby']}

"Syntax and indetation
Plug 'AnsiEsc.vim', {'on': 'AnsiEsc'}
Plug 'bronson/vim-trailing-whitespace'
Plug 'drslump/vim-syntax-js', {'for': ['javascript', 'html', 'haml']}
Plug 'editorconfig/editorconfig-vim'
Plug 'ekalinin/Dockerfile.vim', {'for': 'Dockerfile'}
Plug 'Valloric/MatchTagAlways', {'for': 'html'}
Plug 'kchmck/vim-coffee-script', {'for': 'coffee'}
Plug 'vim-scripts/JavaScript-Indent', {'for': ['javascript', 'html', 'haml']}

" call neobundle#end()
call plug#end()
filetype plugin indent on    " required

syntax on

" Vim options
set number
set relativenumber
set ignorecase
set smartcase
set infercase
set hlsearch
set incsearch
set smartindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set wildmenu
set wildmode=full
set mouse=a
set nowrap
set shiftround
set fillchars+=stlnc:-
set laststatus=2
if !isdirectory('~/tmp/vim') | silent execute '!rm -rf ~/tmp/vim; mkdir -p ~/tmp/vim' | endif
set directory=~/tmp/vim//

" CSApprox, for emulating gvim colors on the terminal
if !has('gui_running') && exists(':CSApprox')
  CSApprox
endif

if &term =~ '^\(xterm\|screen\)$' && $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

runtime macros/matchit.vim " match the opening/closign html tag when pressing '%'

"Nerd tree
augroup NERDTreeCustomCommands
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup end


" Extracted from Thougbot https://github.com/thoughtbot/dotfiles
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \ exe "normal g`\"" |
        \ endif
  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell
  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell
  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
  autocmd BufWrite * :FixWhitespace
augroup END

let g:netrw_liststyle = 3 " Tree view for netrw

" Indent-Guides Plugin
let g:indent_guides_guide_size = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'netrw']

" set a dictionary for vim dictionary completion
set dictionary=/usr/share/dict/words

" vim theme
colorscheme neverland

" Automatically closes Fugitive.vim buffers when leaving them
autocmd BufReadPost fugitive://* set bufhidden=delete

set foldmethod=syntax
set foldlevel=3

" CtrlP
let g:ctrlp_max_files = 100000
let g:ctrlp_working_path_mode = 0

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --smart-case

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

"Tmux complete
let g:tmuxcomplete#trigger = ''

" Vim AirLine
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1

" Show current file directory in current window
command! EditCurrentDir execute "edit " . expand('%:h')

" Rspec
let g:rspec_command = "SlimuxShellRun bundle exec spring rspec {spec}"

" Syntastic
let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open = 1

" vim-airline
let g:airline_enable_syntastic = 1
