#!/usr/bin/env ruby

require 'optparse'
require 'aws-sdk'

ATTRIBUTES = %i[cluster profile region service ssh_key ssh_user].freeze
Options = Struct.new(*ATTRIBUTES, keyword_init: true) do
  def valid?
    [cluster, profile, service, ssh_key, ssh_user].none?(&:nil?)
  end
end

# rubocop:disable LineLength
args = Options.new(region: 'us-east-1', ssh_user: 'root')

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on('-c', '--cluster=CLUSTER', 'ECS cluster name') { |d| args.cluster = d }
  opts.on('-k', '--ssh_key=SSH_KEY', 'SSH key') { |d| args.ssh_key = d }
  opts.on('-s', '--service=SERVICE', 'ECS service name') { |s| args.service = s }
  opts.on('-p', '--profile=PROFILE', 'AWS Shared credentials profile') { |p| args.profile = p }
  opts.on('-r', '--region=REGION=us-east-1', 'The AWS region') { |r| args.region = r }
  opts.on('-u', '--ssh_user=SSH_USER=root', 'The SSH user') { |r| args.region = r }

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end
# rubocop:enable LineLength

parser.parse!(ARGV)
unless args.valid?
  puts parser
  exit 1
end

ecs = Aws::ECS::Client.new(profile: args.profile, region: args.region)
ec2 = Aws::EC2::Client.new(profile: args.profile, region: args.region)

task_arns = ecs.list_tasks(
  cluster: args.cluster, service_name: args.service
).task_arns

# TODO: Allow user to pick container
eni_id =
  ecs
  .describe_tasks(cluster: args.cluster, tasks: task_arns)
  .tasks
  .first
  .attachments
  .find { |x| x['type'] == 'ElasticNetworkInterface' }
  .details
  .find { |x| x['name'] == 'networkInterfaceId' }
  .value

ip_addr =
  ec2
  .describe_network_interfaces(network_interface_ids: [eni_id])
  .network_interfaces
  .first
  .association
  .public_ip

exec('ssh -o StrictHostKeyChecking=false ' \
     "-i #{args.ssh_key} #{args.ssh_user}@#{ip_addr}")
