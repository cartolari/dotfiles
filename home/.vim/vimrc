set nocompatible
filetype off
let mapleader = ","

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

"Async actions
NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': 'make', 'windows': 'mingw32-make -f make_mingw32.mak'}}
NeoBundle 'tpope/vim-dispatch'

"Commands and mappings
NeoBundle 'andrewradev/linediff.vim'
NeoBundle 'andrewradev/splitjoin.vim'
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'henrik/vim-qargs'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kris89/vim-multiple-cursors'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'thoughtbot/vim-rspec'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-projectionist'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'vim-scripts/starrange'
NeoBundle 'wolfy87/vim-enmasse'

"Completions and snippets
NeoBundle 'honza/vim-snippets'
NeoBundle 'marijnh/tern_for_vim', {'build': {'unix': 'npm install', 'windows': 'npm install'}}
NeoBundle 'nosami/omnisharp'
NeoBundle 'raimondi/delimitmate'
NeoBundle 'rstacruz/sparkup'
NeoBundle 'shougo/neocomplete.vim'
NeoBundle 'sirver/ultisnips'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'wellle/tmux-complete.vim'

"Colorschemes
NeoBundle 'csapprox'
NeoBundle 'trapd00r/neverland-vim-theme'

"File finders and browsers
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'rking/ag.vim'

"Integrations
NeoBundle 'epeli/slimux'
NeoBundle 'shutnik/jshint2.vim'
NeoBundle 'tpope/vim-fugitive'

"Interface
NeoBundle 'bling/vim-airline'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'vim-scripts/TaskList.vim'
NeoBundle 'vim-scripts/ZoomWin'
NeoBundle 'wesq3/vim-windowswap'

"Language specific
NeoBundle 'ingydotnet/yaml-vim'
NeoBundle 'isnowfy/python-vim-instant-markdown'
NeoBundle 'keithbsmiley/tmux.vim'
NeoBundle 'nelstrom/vim-textobj-rubyblock'
NeoBundle 'othree/html5.vim'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'tpope/vim-rails'
NeoBundle 'vim-ruby/vim-ruby'

"Syntax and indetation
NeoBundle 'AnsiEsc.vim'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'drslump/vim-syntax-js'
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'ekalinin/Dockerfile.vim'
NeoBundle 'gregsexton/MatchTag'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'mustache/vim-mustache-handlebars'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'vim-scripts/JavaScript-Indent'

call neobundle#end()
filetype plugin indent on    " required
NeoBundleCheck

syntax on

" Vim options
set number
set relativenumber
set ignorecase
set smartcase
set infercase
set hlsearch
set incsearch
set smartindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set wildmenu
set wildmode=full
set mouse=a
set nowrap
set shiftround
set fillchars+=stlnc:-
set laststatus=2
if !isdirectory('~/tmp/vim') | silent execute '!rm -rf ~/tmp/vim; mkdir -p ~/tmp/vim' | endif
set directory=~/tmp/vim//

" CSApprox, for emulating gvim colors on the terminal
if !has('gui_running') && exists(':CSApprox')
  CSApprox
endif

if &term =~ '^\(xterm\|screen\)$' && $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

runtime macros/matchit.vim " match the opening/closign html tag when pressing '%'

"Nerd tree
augroup NERDTreeCustomCommands
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup end


" Extracted from Thougbot https://github.com/thoughtbot/dotfiles
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \ exe "normal g`\"" |
        \ endif
  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell
  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell
  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END

let g:netrw_liststyle = 3 " Tree view for netrw

" Indent-Guides Plugin
let g:indent_guides_guide_size = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'netrw']

" set a dictionary for vim dictionary completion
set dictionary=/usr/share/dict/words

" vim theme
colorscheme neverland

" Automatically closes Fugitive.vim buffers when leaving them
autocmd BufReadPost fugitive://* set bufhidden=delete

set foldmethod=syntax
set foldlevel=3

" CtrlP
let g:ctrlp_max_files = 100000
let g:ctrlp_working_path_mode = 0

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --smart-case

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

"Tmux complete
let g:tmuxcomplete#trigger = ''

" Vim AirLine
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1

" Show current file directory in current window
command! EditCurrentDir execute "edit " . expand('%:h')

" Rspec
let g:rspec_command = "SlimuxShellRun bundle exec spring rspec {spec}"
