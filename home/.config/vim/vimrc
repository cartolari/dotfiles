" vim: set foldlevel=0 foldmethod=marker:

let g:mapleader = ','

" Vimscripts {{{
" Ensure XDG locations exists

let g:bundle_dir = $XDG_DATA_HOME . '/vim/bundle'
let g:cache_dir = $XDG_CACHE_HOME . '/vim'
let g:config_dir = $XDG_CONFIG_HOME . '/vim'
let g:data_dir = $XDG_DATA_HOME . '/vim'
let g:undo_dir = g:cache_dir . '/undo'

if !isdirectory(g:bundle_dir) | call mkdir(g:bundle_dir) | endif
if !isdirectory(g:cache_dir) | call mkdir(g:cache_dir) | endif
if !isdirectory(g:config_dir) | call mkdir(g:config_dir) | endif
if !isdirectory(g:data_dir) | call mkdir(g:data_dir) | endif
if !isdirectory(g:undo_dir) | call mkdir(g:undo_dir) | endif

if has('nvim')
  set viminfo+=n$XDG_CACHE_HOME/nvim/shada/main.shada
else
  set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endif
set runtimepath+=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

runtime bundles.vim
runtime macros/matchit.vim " match the opening/closign html tag when pressing '%'
" }}}

" Vim options {{{
filetype plugin indent on
syntax on
set encoding=utf-8
set number
set relativenumber
set ignorecase
set smartcase
set infercase
set hlsearch
set incsearch
set smartindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start
set wildmenu
set wildmode=full
set mouse=a
set nowrap
set shiftround
set laststatus=2
set nobackup
set noswapfile
let &undodir=g:undo_dir . '//'
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload
set dictionary=/usr/share/dict/words
set foldmethod=syntax
set nofoldenable
set history=1000
set scrolloff=3 " Leave some ground while scrolling
set background=dark
set shortmess+=c " Quiet completions
set splitright
set updatetime=250
set colorcolumn=80
set termguicolors
if has('pythonx')
  set pyxversion=3
endif

scriptencoding utf-8

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
colorscheme badwolf
" }}}

" Highlight {{{
highlight OverLength ctermbg=red ctermfg=white guibg=#592929

" Marks the 81st column of lines wider than 80 characters
function! ShowOverLength()
  if !exists('b:over_length_match')
    let b:over_length_match = matchadd('OverLength', '\v%81v\ze(.+)', 100)
  endif
endfunction

function! HideOverLength()
  if exists('b:over_length_match')
    call matchdelete(b:over_length_match)
    unlet b:over_length_match
  endif
endfunction

command HideOverLength call HideOverLength()
command ShowOverLength call ShowOverLength()
" }}}

augroup markdown " {{{
  autocmd!

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell
  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
augroup END " }}}

augroup git " {{{
  autocmd!

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell
  " Automatically closes Fugitive.vim buffers when leaving them
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END
" }}}

" General auto commands {{{
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \ exe "normal g`\"" |
        \ endif
  " Allow stylesheets and html to autocomplete hyphenated words
  autocmd FileType html,css,scss,sass setlocal iskeyword+=-
  " Remove any trailing whitespace before saving
  autocmd BufWrite * :FixWhitespace
  " Resize splits when the window is resized
  autocmd VimResized * :wincmd =
  " Treat ? as part of names in Ruby
  autocmd FileType ruby setlocal iskeyword+=?
augroup END
" }}}

" Ag as grep {{{
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --smart-case
end
" }}}

" Ale {{{
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_sign_column_always = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
highlight link ALEErrorSign errormsg
highlight link ALEWarningSign question
" }}}

" Netrw {{{
let g:netrw_localrmdir='rm -r'
let g:netrw_home = g:data_dir
" }}}

" Vim instant markdown {{{
let g:instant_markdown_autostart = 0
" }}}

" Lightline {{{
function! LightlineFilename()
  let l:filename = ''
  if &readonly && &filetype !=# 'help'
    let l:filename .= ' '
  endif

  let l:filename .= (expand('%:t') !=# '' ? expand('%:t') : '[No Name]')

  if &modified && &filetype !=# 'help'
    let l:filename .= ' +'
  endif

  return l:filename
endfunction

function! LightlineFugitive()
  if exists('*fugitive#head')
    let l:branch = fugitive#head()
    return l:branch !=# '' ? ' '. l:branch : ''
  endif
  return ''
endfunction

function! ALEGetStatusLine() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? '' : printf(
        \ '✗ %d ⚠ %d',
        \ all_errors,
        \ all_non_errors
        \)
endfunction

let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'ale', 'filename' ] ]
  \ },
  \ 'component': {
  \   'filename': '%{LightlineFilename()}',
  \   'fugitive': '%{LightlineFugitive()}',
  \   'ale': '%{ALEGetStatusLine()}'
  \ },
  \ 'component_visible_condition': {
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())',
  \   'ale': "ALEGetStatusLine() != ''"
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }
let g:buftabline_numbers = 1
let g:buftabline_indicators = 1
let g:buftabline_separators = 1
let g:lightline.colorscheme = 'Tomorrow_Night'
" }}}

" Switch {{{
augroup ruby
  autocmd!
  autocmd FileType ruby let b:switch_custom_definitions =
        \ [
        \   {
        \     'validates_\(\w\+\)_of\s\+\(:\w\+\)': 'validates \2, \1: true',
        \     'validates\s\+:\(\w\+\),\s\+\(\w\+\):\s\+true':     'validates_\2_of :\1',
        \   },
        \ ]
augroup end
" }}}

" Vim test {{{
let g:test#strategy = 'vtr'
" }}}

" Localvimrc  {{{
let g:localvimrc_persistent = 1
let g:localvimrc_sandbox = 0
" }}}

" FZF {{{
" Return a list with all open buffers
function! s:buflist()
  redir => l:ls
  silent l:ls
  redir END
  return split(l:ls, '\n')
endfunction

" Handles a MRU search in FZF
function! s:bufopen(e)
  " Exit if no file was picked
  if len(a:e) < 2 | return | endif

  " Fzf sends two lines the first with the key combination used to pick
  " a file and the second with the matched line
  let [l:key, l:buffer_line] = a:e[0:1]
  " Extract the buffer number from the matched line
  let l:buffer_number = matchstr(l:buffer_line, '^[ 0-9]*')
  " Pick the appropriate command based on the key combination used
  let l:cmd = get({
        \ 'ctrl-x': 'sbuffer',
        \ 'ctrl-v': 'vertical sbuffer',
        \ 'ctrl-t': 'tabnew | buffer '
        \ }, l:key, 'buffer')
  " Run the picked command with the matched buffer
  execute l:cmd . l:buffer_number
endfunction

" Command to list MRU files
command! FZFMru call fzf#run({
      \ 'source': reverse(<sid>buflist()),
      \ 'sink*': function('<sid>bufopen'),
      \ 'options': '--expect=ctrl-t,ctrl-v,ctrl-x',
      \ 'down': len(<sid>buflist()) + 2
      \ })
" }}}

" CtrlSF {{{
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_leading_space = 2
let g:ctrlsf_regex_pattern = 1
" }}}

" Disable standard tComment mappings {{{
let g:tcomment_mapleader1 = ''
let g:tcomment_mapleader2 = ''
" }}}

" Yank Ring {{{
let g:yankring_dot_repeat_yank = 1
let g:yankring_clipboard_monitor = 0
let g:yankring_history_dir = g:data_dir
" }}}

" Ultisnips {{{
let g:UltiSnipsUsePythonVersion = 3
" }}}

" YCM {{{
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_python_binary_path = 'python3'
let g:ycm_python_interpreter = 'python3'
let g:ycm_semantic_triggers = {
     \  'elm' : ['.'],
     \ }
" }}}

" Gundo {{{
let g:gundo_prefer_python3 = 1
" }}}

" Denite {{{
call denite#custom#var('file_rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])
call denite#custom#source('file_rec', 'sorters', ['sorter_sublime_multiprocess'])
call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#option('default', 'winheight', 10)

hi link deniteMatched Underline
hi link deniteMatchedChar DiffText
" }}}

" GitGutter {{{
let g:gitgutter_async = 1
let g:gitgutter_realtime = 1
" }}}

" Auto create dir on save {{{
augroup CreateDir
  au!
  au BufWritePre,FileWritePre * call <SID>CreateAndSaveDirectory()
augroup END

function s:CreateAndSaveDirectory()
  let s:directory = expand('<afile>:p:h')
  if !isdirectory(s:directory)
    call mkdir(s:directory, 'p')
  endif
endfunction
" }}}

" Terraform {{{
let g:terraform_fmt_on_save = 1
" }}}

" JS {{{
augroup jsx " {{{
  autocmd FileType javascript runtime! ftplugin/html/sparkup.html
augroup end " }}}

let g:jsx_ext_required = 0
let g:user_emmet_settings = {
      \ 'javascript': {
      \    'attribute_name': { 'class': 'className', 'for': 'htmlFor' }
      \ }
      \ }
" }}}

" Elm {{{
let g:elm_format_autosave = 1
" }}}

" TypeScript {{{
let g:tsuquyomi_single_quote_import = 1
" }}}

" C# {{{
augroup Omnisharp
  autocmd!
  autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
  autocmd FileType cs setlocal sw=4 ts=4 sts=4
augroup end
let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_server_type='roslyn'
let g:Omnisharp_start_server=0
let g:Omnisharp_stop_server=0
" }}}

" YAML {{{
augroup yaml
  autocmd!
  autocmd BufRead,BufNewFile *.yml,*.yaml set filetype=ansible
augroup end
" }}}
